_section: API Providers @<api-providers>

There are many services which offer a web API for accessing
the 420coin Blockchain. These Providers allow connecting
to them, which simplifies development, since you do not need
to run your own instance or cluster of 420coin nodes.

However, this reliance on third-party services can reduce
resiliance, security and increase the amount of required trust.
To mitigate these issues, it is recommended you use a
[Default Provider](providers-getDefaultProvider).


_subsection: FourtwentyvmProvider @<FourtwentyvmProvider> @inherit<[[Provider]]> @src<providers:class.FourtwentyvmProvider>

The **FourtwentyvmProvider** is backed by a combination of the various
[Fourtwentyvm APIs](link-fourtwentyvm-api).

_property: new fourtwentycoins.providers.FourtwentyvmProvider([ network = "homestead", [ apiKey ] ])
Create a new **FourtwentyvmProvider** connected to //network// with the
optional //apiKey//.

The //network// may be specified as **string** for a common
network name, a **number** for a common chain ID or a
[Network Object]provider-(network).

If no //apiKey// is provided, a shared API key will be used,
which may result in reduced performance and throttled requests.
It is highly recommended for production, you register with
[Fourtwentyvm](link-fourtwentyvm) for your own API key.

_note: Note: Default API keys
If no //apiKey// is provided, a shared API key will be used,
which may result in reduced performance and throttled requests.

It is highly recommended for production, you register with
[Fourtwentyvm](link-fourtwentyvm) for your own API key.


_definition: **Supported Networks**

- Homestead (Mainnet)
- Ropsten (proof-of-work testnet)
- Rinkeby (proof-of-authority testnet)
- G&ouml;rli (clique testnet)
- Kovan (proof-of-authority testnet)

_code: Fourtwentyvm Examples @lang<javascript>

// <hide>
const FourtwentyvmProvider = fourtwentycoins.providers.FourtwentyvmProvider;
const apiKey = "...";
// </hide>

// Connect to mainnet (homestead)
provider = new FourtwentyvmProvider();

// Connect to rinkeby testnet (these are equivalent)
provider = new FourtwentyvmProvider("rinkeby");
provider = new FourtwentyvmProvider(4);

const network = fourtwentycoins.providers.getNetwork("rinkeby");
// <hide>
delete network._defaultProvider;
network
// </hide>
//!

provider = new FourtwentyvmProvider(network);

// Connect to mainnet (homestead) with an API key
provider = new FourtwentyvmProvider(null, apiKey);
provider = new FourtwentyvmProvider("homestead", apiKey);


_property: provider.getHistory(address) => Array<History> @src<providers>
@TODO... Explain


_subsection: InfuraProvider @<InfuraProvider> @INHERIT<[[UrlJsonRpcProvider]]> @src<providers:class.InfuraProvider>

The **InfuraProvider** is backed by the popular [INFURA](link-infura)
420coin service.

_property: new fourtwentycoins.providers.InfuraProvider([ network = "homestead", [ apiKey ] ]) @SRC<providers>
Create a new **InfuraProvider** connected to //network// with
the optional //apiKey//.

The //network// may be specified as **string** for a common
network name, a **number** for a common chain ID or a
[Network Object]provider-(network).

The //apiKey// can be a **string** Project ID or an **object**
with the properties ``projectId`` and ``projectSecret`` to
specify a [Project Secret](link-infura-secret) which can be used
on non-public sources (like on a server) to further secure your
API access and quotas.

_property: InfuraProvider.getWebSocketProvider([ network [ , apiKey ] ]) => [[WebSocketProvider]] @<InfuraProvider-getWebSocketProvider> @SRC<providers:InfuraProvider.getWebSocketProvider>
Create a new [[WebSocketProvider]] using the INFURA web-socket endpoint
to connect to //network// with the optional //apiKey//.

The //network// and //apiKey// are specified the same as [the constructor](InfuraProvider).

_note: Note: Default API keys
If no //apiKey// is provided, a shared API key will be used,
which may result in reduced performance and throttled requests.

It is highly recommended for production, you register with
[INFURA](link-infura) for your own API key.

_definition: **Supported Networks**

- Homestead (Mainnet)
- Ropsten (proof-of-work testnet)
- Rinkeby (proof-of-authority testnet)
- G&ouml;rli (clique testnet)
- Kovan (proof-of-authority testnet)

_code: INFURA Examples @lang<javascript>

// <hide>
const InfuraProvider = fourtwentycoins.providers.InfuraProvider;
const projectId = "...";
const projectSecret = "...";
// </hide>

// Connect to mainnet (homestead)
provider = new InfuraProvider();

// Connect to the ropsten testnet
// (see FourtwentyvmProvider above for other network examples)
provider = new InfuraProvider("ropsten");

// Connect to mainnet with a Project ID (these are equivalent)
provider = new InfuraProvider(null, projectId);
provider = new InfuraProvider("homestead", projectId);

// Connect to mainnet with a Project ID and Project Secret
provider = new InfuraProvider("homestead", {
    projectId: projectId,
    projectSecret: projectSecret
});

// Connect to the INFURA WebSocket endpoints with a WebSocketProvider
provider = InfuraProvider.getWebSocketProvider()
// <hide>
provider.destroy();
// </hide>


_subsection: AlchemyProvider @<AlchemyProvider> @inherit<[[UrlJsonRpcProvider]]> @src<providers:class.AlchemyProvider>

The **AlchemyProvider** is backed by [Alchemy](link-alchemy).

_property: new fourtwentycoins.providers.AlchemyProvider([ network = "homestead", [ apiKey ] ])
Create a new **AlchemyProvider** connected to //network// with
the optional //apiKey//.

The //network// may be specified as **string** for a common
network name, a **number** for a common chain ID or a
[Network Object](providers-Network).

_note: Note: Default API keys
If no //apiKey// is provided, a shared API key will be used,
which may result in reduced performance and throttled requests.

It is highly recommended for production, you register with
[Alchemy](link-alchemy) for your own API key.

_definition: **Supported Networks**

- Homestead (Mainnet)
- Ropsten (proof-of-work testnet)
- Rinkeby (proof-of-authority testnet)
- G&ouml;rli (clique testnet)
- Kovan (proof-of-authority testnet)

_code: Alchemy Examples @lang<javascript>

// <hide>
const AlchemyProvider = fourtwentycoins.providers.AlchemyProvider;
const apiKey = "...";
// </hide>

// Connect to mainnet (homestead)
provider = new AlchemyProvider();

// Connect to the ropsten testnet
// (see FourtwentyvmProvider above for other network examples)
provider = new AlchemyProvider("ropsten");

// Connect to mainnet with an API key (these are equivalent)
provider = new AlchemyProvider(null, apiKey);
provider = new AlchemyProvider("homestead", apiKey);

// Connect to the Alchemy WebSocket endpoints with a WebSocketProvider
provider = AlchemyProvider.getWebSocketProvider()
// <hide>
provider.destroy();
// </hide>


_subsection: CloudflareProvider @<CloudflareProvider> @inherit<[[UrlJsonRpcProvider]]> @src<providers:class.CloudflareProvider>

The CloudflareProvider is backed by the [Cloudflare 420coin Gateway](link-cloudflare).

_property: new fourtwentycoins.providers.CloudflareProvider()
Create a new **CloudflareProvider** connected to mainnet (i.e. "homestead").

_definition: **Supported Networks**

- Homestead (Mainnet)

_code: Cloudflare Examples @lang<javascript>

// <hide>
const CloudflareProvider = fourtwentycoins.providers.CloudflareProvider;
// </hide>

// Connect to mainnet (homestead)
provider = new CloudflareProvider();
